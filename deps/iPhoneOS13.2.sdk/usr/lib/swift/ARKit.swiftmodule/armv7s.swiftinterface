// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.1 (swiftlang-1100.2.274.2 clang-1100.2.32.1)
// swift-module-flags: -target armv7s-apple-ios10.3 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftARKit -swift-version 5 -O -enforce-exclusivity=unchecked -module-name ARKit
@_exported import ARKit
import Swift
@available(iOS 11.0, *)
extension ARCamera {
  @frozen public enum TrackingState {
    public enum Reason {
      case initializing
      case excessiveMotion
      case insufficientFeatures
      @available(iOS 11.3, *)
      case relocalizing
      public static func == (a: ARKit.ARCamera.TrackingState.Reason, b: ARKit.ARCamera.TrackingState.Reason) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    case notAvailable
    case limited(ARKit.ARCamera.TrackingState.Reason)
    case normal
  }
  public var trackingState: ARKit.ARCamera.TrackingState {
    get
  }
  @available(iOS 12.0, *)
  @nonobjc public func unprojectPoint(_ point: CoreGraphics.CGPoint, ontoPlane planeTransform: simd.simd_float4x4, orientation: UIKit.UIInterfaceOrientation, viewportSize: CoreGraphics.CGSize) -> simd.simd_float3?
}
@available(iOS 12.0, *)
extension ARSCNView {
  @nonobjc public func unprojectPoint(_ point: CoreGraphics.CGPoint, ontoPlane planeTransform: simd.simd_float4x4) -> simd.simd_float3?
}
@available(iOS 11.0, *)
extension ARPointCloud {
  @nonobjc public var points: [simd.vector_float3] {
    get
  }
  @nonobjc public var identifiers: [Swift.UInt64] {
    get
  }
}
@available(iOS 11.0, *)
extension ARFaceGeometry {
  @nonobjc public var vertices: [simd.vector_float3] {
    get
  }
  @nonobjc public var textureCoordinates: [simd.vector_float2] {
    get
  }
  @nonobjc public var triangleIndices: [Swift.Int16] {
    get
  }
}
@available(iOS 11.3, *)
extension ARPlaneGeometry {
  @nonobjc public var vertices: [simd.vector_float3] {
    get
  }
  @nonobjc public var textureCoordinates: [simd.vector_float2] {
    get
  }
  @nonobjc public var triangleIndices: [Swift.Int16] {
    get
  }
  @nonobjc public var boundaryVertices: [simd.vector_float3] {
    get
  }
}
@available(iOS 12.0, *)
extension ARPlaneAnchor {
  public enum Classification {
    public enum Status {
      case notAvailable
      case undetermined
      case unknown
      public static func == (a: ARKit.ARPlaneAnchor.Classification.Status, b: ARKit.ARPlaneAnchor.Classification.Status) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    case none(ARKit.ARPlaneAnchor.Classification.Status)
    case wall
    case floor
    case ceiling
    case table
    case seat
    case window
    case door
  }
  public var classification: ARKit.ARPlaneAnchor.Classification {
    get
  }
}
@available(iOS 13.0, *)
extension ARSkeletonDefinition {
  @nonobjc public var parentIndices: [Swift.Int] {
    get
  }
  @nonobjc public func index(for jointName: ARKit.ARSkeleton.JointName) -> Swift.Int
}
@available(iOS 13.0, *)
extension ARSkeleton3D {
  @nonobjc public var jointModelTransforms: [simd.simd_float4x4] {
    get
  }
  @nonobjc public var jointLocalTransforms: [simd.simd_float4x4] {
    get
  }
  @nonobjc public func modelTransform(for jointName: ARKit.ARSkeleton.JointName) -> simd.simd_float4x4?
  @nonobjc public func localTransform(for jointName: ARKit.ARSkeleton.JointName) -> simd.simd_float4x4?
}
@available(iOS 13.0, *)
extension ARSkeleton2D {
  @nonobjc public var jointLandmarks: [simd.simd_float2] {
    get
  }
  @nonobjc public func landmark(for jointName: ARKit.ARSkeleton.JointName) -> simd.simd_float2?
}
@available(iOS 11.0, *)
extension ARKit.ARCamera.TrackingState.Reason : Swift.Equatable {}
@available(iOS 11.0, *)
extension ARKit.ARCamera.TrackingState.Reason : Swift.Hashable {}
@available(iOS 12.0, *)
extension ARKit.ARPlaneAnchor.Classification.Status : Swift.Equatable {}
@available(iOS 12.0, *)
extension ARKit.ARPlaneAnchor.Classification.Status : Swift.Hashable {}
