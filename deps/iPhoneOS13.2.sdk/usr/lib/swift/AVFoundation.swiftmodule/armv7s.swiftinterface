// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.1 (swiftlang-1100.2.274.2 clang-1100.2.32.1)
// swift-module-flags: -target armv7s-apple-ios10.3 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftAVFoundation -swift-version 5 -O -enforce-exclusivity=unchecked -module-name AVFoundation
@_exported import AVFoundation
import CoreGraphics
import CoreMedia
import Foundation
import Swift
@available(iOS 10.0, *)
extension AVCaptureDevice.Format {
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 4.0)
  @nonobjc public var supportedColorSpaces: [Foundation.NSNumber]! {
    get
  }
  @available(swift 4.0)
  @available(iOS 10.0, *)
  @nonobjc public var supportedColorSpaces: [AVFoundation.AVCaptureColorSpace] {
    get
  }
}
@available(iOS 10.0, *)
extension AVCapturePhotoOutput {
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 4.0)
  @nonobjc public var supportedFlashModes: [Foundation.NSNumber] {
    get
  }
  @available(swift 4.0)
  @available(iOS 10.0, *)
  @nonobjc public var supportedFlashModes: [AVFoundation.AVCaptureDevice.FlashMode] {
    get
  }
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 4.0)
  @nonobjc public var availablePhotoPixelFormatTypes: [Foundation.NSNumber] {
    get
  }
  @available(swift 4.0)
  @available(iOS 10.0, *)
  @nonobjc public var availablePhotoPixelFormatTypes: [Darwin.OSType] {
    get
  }
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 4.0)
  @nonobjc public var availableRawPhotoPixelFormatTypes: [Foundation.NSNumber] {
    get
  }
  @available(swift 4.0)
  @available(iOS 10.0, *)
  @nonobjc public var availableRawPhotoPixelFormatTypes: [Darwin.OSType] {
    get
  }
}
@available(iOS 10.0, *)
extension AVCapturePhotoSettings {
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 4.0)
  @nonobjc public var availablePreviewPhotoPixelFormatTypes: [Foundation.NSNumber] {
    get
  }
  @available(swift 4.0)
  @available(iOS 10.0, *)
  @nonobjc public var availablePreviewPhotoPixelFormatTypes: [Darwin.OSType] {
    get
  }
}
@available(iOS 11.0, *)
extension AVCaptureSynchronizedDataCollection : Swift.Sequence {
  public func makeIterator() -> AVFoundation.AVCaptureSynchronizedDataCollection.Iterator
  public struct Iterator : Swift.IteratorProtocol {
    mutating public func next() -> AVFoundation.AVCaptureSynchronizedData?
    public typealias Element = AVFoundation.AVCaptureSynchronizedData
  }
  public typealias Element = AVFoundation.AVCaptureSynchronizedData
}
extension AVCaptureVideoDataOutput {
  @available(OSX 10.7, iOS 5.0, *)
  @available(swift, obsoleted: 4.0)
  @nonobjc public var availableVideoCVPixelFormatTypes: [Any]! {
    get
  }
  @available(swift 4.0)
  @available(OSX 10.7, iOS 5.0, *)
  @nonobjc public var availableVideoPixelFormatTypes: [Darwin.OSType] {
    get
  }
}
@available(watchOS 6.0, *)
extension AVError {
  @available(swift, obsoleted: 4.2, message: "Use `device: AVCaptureDevice?` instead")
  public var device: Swift.String? {
    get
  }
  @available(swift 4.2)
  public var device: AVFoundation.AVCaptureDevice? {
    get
  }
  @available(watchOS 6.0, *)
  public var time: CoreMedia.CMTime? {
    get
  }
  @available(watchOS 6.0, *)
  public var fileSize: Swift.Int64? {
    get
  }
  @available(watchOS 6.0, *)
  public var processID: Swift.Int? {
    get
  }
  @available(watchOS 6.0, *)
  public var recordingSuccessfullyFinished: Swift.Bool? {
    get
  }
  @available(watchOS 6.0, *)
  @available(swift, obsoleted: 4.2)
  public var mediaType: Swift.String? {
    get
  }
  @available(swift 4.2)
  @available(watchOS 6.0, *)
  public var mediaType: AVFoundation.AVMediaType? {
    get
  }
  @available(watchOS 6.0, *)
  public var mediaSubtypes: [Swift.Int]? {
    get
  }
  @available(swift 4.2)
  @available(OSX 10.10, iOS 8.0, tvOS 9.0, watchOS 6.0, *)
  public var presentationTimeStamp: CoreMedia.CMTime? {
    get
  }
  @available(swift 4.2)
  @available(OSX 10.10, iOS 8.0, tvOS 9.0, watchOS 6.0, *)
  public var persistentTrackID: CoreMedia.CMPersistentTrackID? {
    get
  }
  @available(swift 4.2)
  @available(OSX 10.10, iOS 8.0, tvOS 9.0, watchOS 6.0, *)
  public var fileType: AVFoundation.AVFileType? {
    get
  }
}
extension AVMetadataMachineReadableCodeObject {
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 4.0)
  @nonobjc public var corners: [Any]! {
    get
  }
  @available(swift 4.0)
  @available(iOS 7.0, *)
  @nonobjc public var corners: [CoreGraphics.CGPoint] {
    get
  }
}
@available(watchOS 6.0, *)
extension CMTime : Swift._ObjectiveCBridgeable {
  public func _bridgeToObjectiveC() -> Foundation.NSValue
  public static func _forceBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreMedia.CMTime?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreMedia.CMTime?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue?) -> CoreMedia.CMTime
  public typealias _ObjectiveCType = Foundation.NSValue
}
@available(watchOS 6.0, *)
extension CMTimeRange : Swift._ObjectiveCBridgeable {
  public func _bridgeToObjectiveC() -> Foundation.NSValue
  public static func _forceBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreMedia.CMTimeRange?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreMedia.CMTimeRange?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue?) -> CoreMedia.CMTimeRange
  public typealias _ObjectiveCType = Foundation.NSValue
}
@available(watchOS 6.0, *)
extension CMTimeMapping : Swift._ObjectiveCBridgeable {
  public func _bridgeToObjectiveC() -> Foundation.NSValue
  public static func _forceBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreMedia.CMTimeMapping?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreMedia.CMTimeMapping?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue?) -> CoreMedia.CMTimeMapping
  public typealias _ObjectiveCType = Foundation.NSValue
}
