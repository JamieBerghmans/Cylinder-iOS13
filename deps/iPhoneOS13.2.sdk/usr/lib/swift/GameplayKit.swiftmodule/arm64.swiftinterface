// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.1 (swiftlang-1100.2.274.2 clang-1100.2.32.1)
// swift-module-flags: -target arm64-apple-ios13.2 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftGameplayKit -swift-version 5 -O -enforce-exclusivity=unchecked -module-name GameplayKit
import CoreGraphics
@_exported import GameplayKit
import Swift
import simd
@available(iOS 9.0, OSX 10.11, tvOS 9.0, *)
extension GKPath {
  convenience public init(points: [Swift.SIMD2<Swift.Float>], radius: Swift.Float, cyclical: Swift.Bool)
}
@available(iOS 10.0, OSX 10.12, tvOS 10.0, *)
extension GKPath {
  convenience public init(points: [Swift.SIMD3<Swift.Float>], radius: Swift.Float, cyclical: Swift.Bool)
}
@available(iOS 9.0, OSX 10.11, tvOS 9.0, *)
extension GKPolygonObstacle {
  convenience public init(points: [Swift.SIMD2<Swift.Float>])
}
@available(iOS 9.0, OSX 10.11, tvOS 9.0, *)
extension GKEntity {
  public func component<ComponentType>(ofType componentClass: ComponentType.Type) -> ComponentType? where ComponentType : GameplayKit.GKComponent
  public func removeComponent<ComponentType>(ofType componentClass: ComponentType.Type) where ComponentType : GameplayKit.GKComponent
}
@available(iOS 9.0, OSX 10.11, tvOS 9.0, *)
extension GKStateMachine {
  public func state<StateType>(forClass stateClass: StateType.Type) -> StateType? where StateType : GameplayKit.GKState
}
