// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.1 (swiftlang-1100.2.274.2 clang-1100.2.32.1)
// swift-module-flags: -target armv7s-apple-ios10.3 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftObjectiveC -swift-version 5 -O -enforce-exclusivity=unchecked -disable-objc-attr-requires-foundation-module -module-name ObjectiveC
@_exported import ObjectiveC
import Swift
import _SwiftObjectiveCOverlayShims
@frozen public struct ObjCBool : Swift.ExpressibleByBooleanLiteral {
  internal var _value: Swift.Int8
  public init(_ value: Swift.Bool)
  public var boolValue: Swift.Bool {
    get
  }
  @_transparent public init(booleanLiteral value: Swift.Bool) {
    self.init(value)
  }
  public typealias BooleanLiteralType = Swift.Bool
}
extension ObjCBool : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension ObjCBool : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public func _convertBoolToObjCBool(_ x: Swift.Bool) -> ObjectiveC.ObjCBool
public func _convertObjCBoolToBool(_ x: ObjectiveC.ObjCBool) -> Swift.Bool
@frozen public struct Selector : Swift.ExpressibleByStringLiteral {
  internal var ptr: Swift.OpaquePointer
  public init(_ str: Swift.String)
  public init(stringLiteral value: Swift.String)
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension Selector : Swift.Equatable, Swift.Hashable {
  public static func == (a: ObjectiveC.Selector, b: ObjectiveC.Selector) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension Selector : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension String {
  public init(_sel: ObjectiveC.Selector)
}
extension Selector : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
@frozen public struct NSZone {
  internal var pointer: Swift.OpaquePointer
}
public func autoreleasepool<Result>(invoking body: () throws -> Result) rethrows -> Result
@available(*, unavailable, message: "Use 'Bool' value 'true' instead")
public var YES: ObjectiveC.ObjCBool {
  get
}
@available(*, unavailable, message: "Use 'Bool' value 'false' instead")
public var NO: ObjectiveC.ObjCBool {
  get
}
extension NSObject : Swift.Equatable, Swift.Hashable {
  public static func == (lhs: ObjectiveC.NSObject, rhs: ObjectiveC.NSObject) -> Swift.Bool
  @nonobjc public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public func _rawHashValue(seed: Swift.Int) -> Swift.Int
}
extension NSObject : Swift.CVarArg {
  public var _cVarArgEncoding: [Swift.Int] {
    get
  }
}
